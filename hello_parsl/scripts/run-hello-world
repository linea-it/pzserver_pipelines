#!/usr/bin/env python3

import argparse
import logging
import time
import uuid

from parsl import bash_app

import parsl
import yaml

from parsl_config import get_parsl_config


def _setup_logger(name="pipeline-logger"):
    """
    Configures the logger for recording events and messages.

    Returns:
        logging.Logger: Configured logger instance.
    """

    logger = logging.getLogger(name)
    logger.setLevel(logging.DEBUG)

    formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")

    file_handler = logging.FileHandler("pipeline.log")
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)

    logger.addHandler(file_handler)

    return logger


@bash_app
def get_hostname(stdout="job.out", stderr="job.err"):
    """get hostname"""

    return "hostname"


def run(param, parsl_conf):
    """Run the Gawa pipeline

    Args:
        param (dict): Gawa parameters. See gawa.cfg for more details
        parsl_conf (instance): Parsl config instance
    """

    logger = _setup_logger(name=__name__)

    logger.info("Parameters: %s", param)

    start_time_full = time.time()

    # Settings Parsl configurations
    parsl.clear()
    parsl.load(parsl_conf)

    _id = uuid.uuid4().hex[:5]

    # call the app and wait for the result
    result = get_hostname(
        stdout=f"output/process-{_id}.out", stderr=f"output/process-{_id}.err"
    ).result()

    time.sleep(int(param.get("sleeptime", 60)))

    print("result: ", result)

    # open the output file and read the result
    with open(f"output/process-{_id}.out", encoding="utf-8") as ofile:
        print(ofile.read())

    logger.info(param.get("message"))
    logger.info("Time elapsed: %s", str(time.time() - start_time_full))
    parsl.clear()


if __name__ == "__main__":
    # Create the parser and add arguments
    parser = argparse.ArgumentParser()
    parser.add_argument(dest="config_path", help="yaml config path")

    args = parser.parse_args()
    config_path = args.config_path

    # Loading Lephare configurations
    with open(config_path, encoding="utf-8") as _file:
        pipe_config = yaml.load(_file, Loader=yaml.FullLoader)

    parsl_config = get_parsl_config(pipe_config.get("executor", "local"))

    # Run pipeline
    run(pipe_config, parsl_config)
